;regress.../arrays/arrays4.smt2
(check
 ;; Declarations
(% Element sort
(% Index sort
(% a1 (term (Array Index Element))
(% i1 (term Index)
(% a2 (term (Array Index Element))
(% i2 (term Index)
(% x (term Index)
(% A2 (th_holds true)
(% A1 (th_holds (not (= (Array Index Element) a1 a2)))
(% A0 (th_holds (= (Array Index Element) (apply _ _ (apply _ _ (apply _ _ (write Index Element) (apply _ _ (apply _ _ (apply _ _ (write Index Element) a1) i1) (apply _ _ (apply _ _ (read Index Element) a2) i1) ) ) i2) (apply _ _ (apply _ _ (read Index Element) (apply _ _ (apply _ _ (apply _ _ (write Index Element) a2) i1) (apply _ _ (apply _ _ (read Index Element) a1) i1) ) ) i2) )  (apply _ _ (apply _ _ (apply _ _ (write Index Element) (apply _ _ (apply _ _ (apply _ _ (write Index Element) a2) i1) (apply _ _ (apply _ _ (read Index Element) a1) i1) ) ) i2) (apply _ _ (apply _ _ (read Index Element) (apply _ _ (apply _ _ (apply _ _ (write Index Element) a1) i1) (apply _ _ (apply _ _ (read Index Element) a2) i1) ) ) i2) ) ))
(: (holds cln)

 ;; Printing deferred declarations 


;; BV const letification


(ext-eps-cln _ _ a1 a2 x (\ .sl1

 ;; Printing the global let map
(@ let1 a1
(@ let2 i1
(@ let3 a2
(@ let4 (apply _ _ (apply _ _ (read Index Element) let3) let2) 
(@ let5 (apply _ _ (apply _ _ (apply _ _ (write Index Element) let1) let2) let4) 
(@ let6 i2
(@ let7 (apply _ _ (apply _ _ (read Index Element) let1) let2) 
(@ let8 (apply _ _ (apply _ _ (apply _ _ (write Index Element) let3) let2) let7) 
(@ let9 (apply _ _ (apply _ _ (read Index Element) let8) let6) 
(@ let10 (apply _ _ (apply _ _ (apply _ _ (write Index Element) let5) let6) let9) 
(@ let11 (apply _ _ (apply _ _ (read Index Element) let5) let6) 
(@ let12 (apply _ _ (apply _ _ (apply _ _ (write Index Element) let8) let6) let11) 
(@ let13 (= (Array Index Element) let10 let12)
(@ let14 (= (Array Index Element) let1 let3)
(@ let15 (= Index let2 let6)
(@ let16 (epsilon Index x ((not (= _ (apply _ _ (apply _ _ (read Index Element) a1) x) (apply _ _ (apply _ _ (read Index Element) a2) x)))))
(@ let17 (apply _ _ (apply _ _ (read Index Element) let1) let16) 
(@ let18 (apply _ _ (apply _ _ (read Index Element) let3) let16) 
(@ let19 (= Element let17 let18)
(@ let20 (= Index let2 let16)
(@ let21 (apply _ _ (apply _ _ (read Index Element) let8) let16) 
(@ let22 (= Element let18 let21)
(@ let23 (= Index let6 let16)
(@ let24 (apply _ _ (apply _ _ (read Index Element) let5) let16) 
(@ let25 (= Element let17 let24)
(@ let26 (apply _ _ (apply _ _ (read Index Element) let10) let16) 
(@ let27 (= Element let24 let26)
(@ let28 (apply _ _ (apply _ _ (read Index Element) let12) let16) 
(@ let29 (= Element let21 let28)

 ;; Printing aliasing declarations 


 ;; Rewrites for Lemmas 

 ;; In the preprocessor we trust 
(th_let_pf _ (trust_f (not let14)) (\ .PA265
(th_let_pf _ (trust_f (= (Array Index Element) let10 let12)) (\ .PA261

;; Printing mapping from preprocessed assertions into atoms 
(decl_atom let13 (\ .v2 (\ .a2
(decl_atom let14 (\ .v4 (\ .a4
(decl_atom let15 (\ .v3 (\ .a3
(decl_atom let19 (\ .v5 (\ .a5
(decl_atom let20 (\ .v6 (\ .a6
(decl_atom let22 (\ .v7 (\ .a7
(decl_atom let23 (\ .v9 (\ .a9
(decl_atom let25 (\ .v8 (\ .a8
(decl_atom let27 (\ .v10 (\ .a10
(decl_atom let29 (\ .v11 (\ .a11
(satlem _ _ (asf _ _ _ .a2 (\ .l4 (clausify_false (contra _ .PA261 .l4)))) (\ .pb4
(satlem _ _ (ast _ _ _ .a4 (\ .l9 (clausify_false (contra _ .l9 .PA265)))) (\ .pb5
 ;; Theory Lemmas 

;; BB atom mapping


;; Bit-blasting definitional clauses 


 ;; Bit-blasting learned clauses 

(satlem _ _ (asf _ _ _ .a7 (\ .l14 (asf _ _ _ .a6 (\ .l12  ;; Array Theory Lemma 
;;(= (select a2 let16) (select (store a2 i1 (select a1 i1)) let16)) (= i1 let16) 
(clausify_false (contra _ (symm _ _ _ (row _ _ let2 let16 let3 let7 .l12)) .l14))
))))( \ .lemc8
(satlem _ _ (ast _ _ _ .a11 (\ .l23 (ast _ _ _ .a10 (\ .l21 (ast _ _ _ .a6 (\ .l13 (asf _ _ _ .a5 (\ .l10 (ast _ _ _ .a2 (\ .l5  ;; Array Theory Lemma 
;;(let ((_let_0 (store a2 i1 (select a1 i1)))) (not (= (select _let_0 let16) (select (store _let_0 i2 (select (store a1 i1 (select a2 i1)) i2)) let16)))) (let ((_let_0 (store a1 i1 (select a2 i1)))) (not (= (select _let_0 let16) (select (store _let_0 i2 (select (store a2 i1 (select a1 i1)) i2)) let16)))) (not (= i1 let16)) (= (select a1 let16) (select a2 let16)) (let ((_let_0 (store a2 i1 (select a1 i1)))) (let ((_let_1 (store a1 i1 (select a2 i1)))) (not (= (store _let_1 i2 (select _let_0 i2)) (store _let_0 i2 (select _let_1 i2)))))) 
(clausify_false (contra _ (trans _ _ _ _ (trans _ _ _ _ (symm _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ .l21 (cong _ _ _ _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let10)) (symm _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (symm _ _ _ .l5)))) (refl _ let16))) (symm _ _ _ .l23)) (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let8)) .l13))) (row1 _ _ let3 let2 let7)) (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let1)) (symm _ _ _ .l13))))) .l21) (trans _ _ _ _ (trans _ _ _ _ (symm _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let5)) .l13) .l21)) (row1 _ _ let1 let2 let4)) (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let3)) (symm _ _ _ .l13))))) .l10))
))))))))))( \ .lemc15
(satlem _ _ (asf _ _ _ .a8 (\ .l16 (asf _ _ _ .a6 (\ .l12  ;; Array Theory Lemma 
;;(= (select a1 let16) (select (store a1 i1 (select a2 i1)) let16)) (= i1 let16) 
(clausify_false (contra _ (symm _ _ _ (row _ _ let2 let16 let1 let4 .l12)) .l16))
))))( \ .lemc9
(satlem _ _ (ast _ _ _ .a11 (\ .l23 (ast _ _ _ .a10 (\ .l21 (ast _ _ _ .a8 (\ .l17 (ast _ _ _ .a7 (\ .l15 (asf _ _ _ .a5 (\ .l10 (ast _ _ _ .a2 (\ .l5  ;; Array Theory Lemma 
;;(let ((_let_0 (store a2 i1 (select a1 i1)))) (not (= (select _let_0 let16) (select (store _let_0 i2 (select (store a1 i1 (select a2 i1)) i2)) let16)))) (let ((_let_0 (store a1 i1 (select a2 i1)))) (not (= (select _let_0 let16) (select (store _let_0 i2 (select (store a2 i1 (select a1 i1)) i2)) let16)))) (not (= (select a1 let16) (select (store a1 i1 (select a2 i1)) let16))) (not (= (select a2 let16) (select (store a2 i1 (select a1 i1)) let16))) (= (select a1 let16) (select a2 let16)) (let ((_let_0 (store a2 i1 (select a1 i1)))) (let ((_let_1 (store a1 i1 (select a2 i1)))) (not (= (store _let_1 i2 (select _let_0 i2)) (store _let_0 i2 (select _let_1 i2)))))) 
(clausify_false (contra _ (trans _ _ _ _ (trans _ _ _ _ .l17 .l21) (trans _ _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let10)) (symm _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (symm _ _ _ .l5)))) (refl _ let16)) (symm _ _ _ .l23)) (symm _ _ _ .l15))) .l10))
))))))))))))( \ .lemc19
(satlem _ _ (ast _ _ _ .a9 (\ .l19 (ast _ _ _ .a8 (\ .l17 (ast _ _ _ .a7 (\ .l15 (asf _ _ _ .a5 (\ .l10 (ast _ _ _ .a2 (\ .l5  ;; Array Theory Lemma 
;;(not (= i2 let16)) (not (= (select a1 let16) (select (store a1 i1 (select a2 i1)) let16))) (not (= (select a2 let16) (select (store a2 i1 (select a1 i1)) let16))) (= (select a1 let16) (select a2 let16)) (let ((_let_0 (store a2 i1 (select a1 i1)))) (let ((_let_1 (store a1 i1 (select a2 i1)))) (not (= (store _let_1 i2 (select _let_0 i2)) (store _let_0 i2 (select _let_1 i2)))))) 
(clausify_false (contra _ (trans _ _ _ _ (trans _ _ _ _ (symm _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ .l15 (symm _ _ _ (cong _ _ _ _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let8)) (symm _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let8)))) .l19))) (symm _ _ _ (row1 _ _ let5 let6 let9))) (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (symm _ _ _ .l5)) (refl _ let6)))) (row1 _ _ let8 let6 let11)) (symm _ _ _ (cong _ _ _ _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let5)) (symm _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let5)))) (symm _ _ _ .l19)))) (symm _ _ _ .l17))) .l15) (symm _ _ _ .l15)) .l10))
))))))))))( \ .lemc23
(satlem _ _ (asf _ _ _ .a6 (\ .l12 (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a5 (\ .l10 (ast _ _ _ .a2 (\ .l5  ;; Array Theory Lemma 
;;(= i1 let16) (not (= i1 i2)) (= (select a1 let16) (select a2 let16)) (let ((_let_0 (store a2 i1 (select a1 i1)))) (let ((_let_1 (store a1 i1 (select a2 i1)))) (not (= (store _let_1 i2 (select _let_0 i2)) (store _let_0 i2 (select _let_1 i2)))))) 
(clausify_false (contra _ (symm _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (symm _ _ _ (trans _ _ _ _ (row _ _ let6 let16 let8 let11 (negtrans2 _ _ _ _ (symm _ _ _ .l7) .l12)) (row _ _ let2 let16 let3 let7 .l12))) (cong _ _ _ _ _ _ (trans _ _ _ _ (symm _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) .l5)) (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let10))) (refl _ let16))) (row _ _ let6 let16 let5 let9 (negtrans2 _ _ _ _ (symm _ _ _ .l7) .l12))) (row _ _ let2 let16 let1 let4 .l12))) .l10))
))))))))( \ .lemc12
(satlem _ _ (ast _ _ _ .a5 (\ .l11 (asf _ _ _ .a4 (\ .l8  ;; Array Theory Lemma 
;;(not (= (select a1 let16) (select a2 let16))) (= a1 a2) 
(clausify_false (contra _ .l11 (or_elim_1 _ _ .l8 .sl1)))
))))( \ .lemc6
(satlem _ _ (asf _ _ _ .a11 (\ .l22 (asf _ _ _ .a9 (\ .l18  ;; Array Theory Lemma 
;;(let ((_let_0 (store a2 i1 (select a1 i1)))) (= (select _let_0 let16) (select (store _let_0 i2 (select (store a1 i1 (select a2 i1)) i2)) let16))) (= i2 let16) 
(clausify_false (contra _ (symm _ _ _ (row _ _ let6 let16 let8 let11 .l18)) .l22))
))))( \ .lemc11
(satlem _ _ (asf _ _ _ .a10 (\ .l20 (asf _ _ _ .a9 (\ .l18  ;; Array Theory Lemma 
;;(let ((_let_0 (store a1 i1 (select a2 i1)))) (= (select _let_0 let16) (select (store _let_0 i2 (select (store a2 i1 (select a1 i1)) i2)) let16))) (= i2 let16) 
(clausify_false (contra _ (symm _ _ _ (row _ _ let6 let16 let5 let9 .l18)) .l20))
))))( \ .lemc10
(satlem _ _ (ast _ _ _ .a9 (\ .l19 (ast _ _ _ .a6 (\ .l13 (asf _ _ _ .a3 (\ .l6  ;; UF Theory Lemma 
(clausify_false (contra _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ .l13 (symm _ _ _ .l19)) .l19) (symm _ _ _ .l19)) .l6))
))))))( \ .lemc16
(satlem _ _ (ast _ _ _ .a6 (\ .l13 (ast _ _ _ .a3 (\ .l7 (asf _ _ _ .a5 (\ .l10 (ast _ _ _ .a2 (\ .l5  ;; Array Theory Lemma 
(clausify_false (contra _ (symm _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (trans _ _ _ _ (symm _ _ _ (trans _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) .l5) (refl _ let6)) (trans _ _ _ _ (row1 _ _ let8 let6 let11) (trans _ _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let5)) (symm _ _ _ .l7)) (trans _ _ _ _ (row1 _ _ let1 let2 let4) (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let3)) .l13)))))) (row1 _ _ let5 let6 let9)) (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let8)) .l7))) (row1 _ _ let3 let2 let7)) (symm _ _ _ (cong _ _ _ _ _ _ (cong _ _ _ _ _ _ (refl _ (read Index Element) ) (refl _ let1)) (symm _ _ _ .l13))))) .l10))
))))))))( \ .lemc7
(satlem_simplify _ _ _ (R _ _ .lemc6 .pb5 .v4) (\ .cl13
(satlem_simplify _ _ _ (Q _ _ (R _ _ (R _ _ (Q _ _ (R _ _ .lemc12 .cl13 .v5) .pb4 .v2) .lemc7 .v6) .cl13 .v5) .pb4 .v2) (\ .cl14
(satlem_simplify _ _ _ (R _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ .lemc15 .cl13 .v5) .pb4 .v2) .lemc11 .v11) .lemc10 .v10) .lemc16 .v9) .cl14 .v3) (\ .cl18
(satlem_simplify _ _ _ (R _ _ .lemc9 .cl18 .v6) (\ .cl20
(satlem_simplify _ _ _ (R _ _ .lemc8 .cl18 .v6) (\ .cl21
(satlem_simplify _ _ _ (Q _ _ (Q _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ .lemc19 .cl20 .v8) .cl21 .v7) .cl13 .v5) .pb4 .v2) .lemc11 .v11) .lemc10 .v10) (\ .cl22
(satlem_simplify _ _ _ (Q _ _ (R _ _ (Q _ _ (Q _ _ (Q _ _ .lemc23 .cl22 .v9) .cl20 .v8) .cl21 .v7) .cl13 .v5) .pb4 .v2) (\ empty empty)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
;;
